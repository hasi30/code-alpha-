# -*- coding: utf-8 -*-
"""code alpha t3 data visualization of amazon ecom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZWeI7PICm8_niLmArYEWCNKM-AJbGPDG

Data visualization for amazon ecom product sales
"""

import pandas as pd

# Load the uploaded CSV file
file_path = "/content/amazon_sales_data 2025.csv"
df = pd.read_csv(file_path)

# Show basic info and first few rows
df_info = df.info()
df_head = df.head()
df_description = df.describe(include='all')

df_head, df_description

import matplotlib.pyplot as plt
import seaborn as sns

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'], format="%d-%m-%y")

# Create new columns for month and year
df['Month'] = df['Date'].dt.month_name()
df['Year'] = df['Date'].dt.year

# Aggregate data
category_counts = df['Category'].value_counts()
payment_counts = df['Payment Method'].value_counts()
status_counts = df['Status'].value_counts()
monthly_sales = df.groupby(df['Date'].dt.to_period('M'))['Total Sales'].sum()

# Plotting setup
sns.set(style="ticks")
fig, axs = plt.subplots(2, 2, figsize=(16, 12))

# Category distribution
sns.countplot(data=df, y='Category', order=category_counts.index, ax=axs[0, 0], palette="pastel")
axs[0, 0].set_title("Product Category Distribution")

# Payment methods
sns.countplot(data=df, y='Payment Method', order=payment_counts.index, ax=axs[0, 1], palette="muted")
axs[0, 1].set_title("Payment Method Distribution")

# Order status
sns.countplot(data=df, x='Status', order=status_counts.index, ax=axs[1, 0], palette="deep")
axs[1, 0].set_title("Order Status Breakdown")

# Monthly sales trend
monthly_sales.plot(kind='line', marker='o', ax=axs[1, 1])
axs[1, 1].set_title("Monthly Sales Trend")
axs[1, 1].set_ylabel("Total Sales")
axs[1, 1].set_xlabel("Month")

plt.tight_layout()
plt.show()

# Re-import libraries and reload the file after kernel reset
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = "/content/amazon_sales_data 2025.csv"
df = pd.read_csv(file_path)

# Convert 'Date' to datetime
df['Date'] = pd.to_datetime(df['Date'], format="%d-%m-%y")

# Feature engineering
df['Weekday'] = df['Date'].dt.day_name()
df['Is_Weekend'] = df['Weekday'].isin(['Saturday', 'Sunday'])
df['Price_Segment'] = pd.cut(df['Price'], bins=[0, 100, 500, 1000, float('inf')],
                             labels=['Low', 'Medium', 'High', 'Premium'])
df['Month'] = df['Date'].dt.month_name()

# Set up more visualizations
sns.set(style="whitegrid")
fig, axs = plt.subplots(2, 2, figsize=(16, 12))

# 1. Top products by total sales
top_products = df.groupby('Product')['Total Sales'].sum().nlargest(10).sort_values()
top_products.plot(kind='barh', ax=axs[0, 0], color='skyblue')
axs[0, 0].set_title("Top 10 Products by Total Sales")
axs[0, 0].set_xlabel("Total Sales")

# 2. Sales distribution per month
monthly_sales = df.groupby('Month')['Total Sales'].sum().reindex([
     'January', 'February', 'March', 'April', 'May',])
monthly_sales.plot(kind='bar', ax=axs[0, 1], color='salmon')
axs[0, 1].set_title("Total Sales per Month")
axs[0, 1].set_ylabel("Total Sales")
axs[0, 1].tick_params(axis='x', rotation=45)

# 3. Sales by customer location
top_locations = df['Customer Location'].value_counts().nlargest(10)
sns.barplot(x=top_locations.values, y=top_locations.index, ax=axs[1, 0], color='pink')
axs[1, 0].set_title("Top 10 Customer Locations by Order Count")
axs[1, 0].set_xlabel("Order Count")

# 4. Quantity vs Price scatter plot
sns.scatterplot(data=df, x='Price', y='Quantity', hue='Category', ax=axs[1, 1])
axs[1, 1].set_title("Price vs Quantity Sold (Colored by Category)")

plt.tight_layout()
plt.show()

import numpy as np

# Create a numeric version of 'Status' for cancellation analysis
df['Is_Cancelled'] = df['Status'].apply(lambda x: 1 if x.lower() == 'cancelled' else 0)

# Select numeric features for correlation
numeric_cols = ['Price', 'Quantity', 'Total Sales', 'Is_Cancelled']
corr_matrix = df[numeric_cols].corr()

# Plot correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title("Correlation Heatmap: Sales, Quantity, Price, and Cancellations")
plt.show()